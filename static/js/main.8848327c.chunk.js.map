{"version":3,"sources":["User.js","Comment.js","CommentList.js","Post.js","PostList.js","App.js","serviceWorker.js","index.js"],"names":["User","props","react_default","a","createElement","className","user","name","email","concat","address","city","street","Comment","comment","body","CommentList","comments","map","value","src_Comment","key","id","Post","post","title","src_User","src_CommentList","PostList","posts","userIndex","users","findIndex","userId","filter","postId","src_Post","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","buttonState","query","url","fetch","then","res","json","data","_this2","Promise","all","loadUrl","_ref","_ref2","slicedToArray","setState","event","target","_this3","indexOf","trim","onClick","loadContent","bind","disabled","Fragment","type","placeholder","onChange","handleChange","src_PostList","getQueryed","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.8848327c.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction User(props) {\r\n  return (\r\n  <div className=\"user\">\r\n    <p> {props.user.name} </p>\r\n  <p> {props.user.email} </p>\r\n  <p> {`${props.user.address.city} ${props.user.address.street}`}</p>\r\n  </div>\r\n  );\r\n}\r\n\r\nexport default User;\r\n","import React from 'react';\r\n\r\nfunction Comment(props) {\r\n  return (\r\n  <div className=\"comment\">\r\n    <h3> {props.comment.name} </h3>\r\n  <p> {props.comment.email} </p>\r\n  <p> {props.comment.body} </p>\r\n  </div>\r\n  );\r\n}\r\n\r\nexport default Comment;\r\n\r\n","import React from 'react';\r\nimport Comment from \"./Comment.js\";\r\n\r\nfunction CommentList(props) {\r\n  return props.comments.map((value) => {\r\n  return <Comment key={value.id} comment={value}/>\r\n  });\r\n}\r\n\r\nexport default CommentList;\r\n                            \r\n","import React from 'react';\r\nimport User from \"./User.js\";\r\nimport CommentList from \"./CommentList.js\";\r\nimport \"./post.css\";\r\n\r\nfunction Post(props) {\r\n  return (\r\n  <div className=\"post\">\r\n    <h1>\r\n    {props.post.title}\r\n    </h1>\r\n  \r\n  <p> {props.post.body} </p>\r\n  <User user={props.user} />\r\n  \r\n  <p className=\"commentsText\"> COMMENTS: </p>\r\n  <CommentList comments={props.comments} />\r\n  </div>\r\n  );\r\n}\r\n\r\nexport default Post;\r\n\r\n","import React from 'react';\r\nimport './App.css';\r\nimport Post from \"./Post.js\";\r\n\r\nfunction PostList(props) {\r\n  return props.posts.map((value) => {\r\n    let userIndex = props.users.findIndex(user => user.id === value.userId);\r\n    let comments = props.comments.filter(comment => comment.postId === value.id);\r\n  \r\n    return <Post key={value.id} post={value} user={props.users[userIndex]} comments={comments}/>\r\n  });\r\n}\r\n\r\nexport default PostList;\r\n","import React from 'react';\nimport './App.css';\nimport PostList from \"./PostList.js\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      buttonState: 0,\n      posts: [],\n      users: [],\n\t  comments: [],\n\t  query: \"\",\n    }\n  }\n  \n  loadUrl(url) {\n    return fetch(url)\n    .then(res => res.json())\n    .then(data => data);\n  }\n  \n  loadContent() {\n    Promise.all([\n      this.loadUrl('https://jsonplaceholder.typicode.com/posts'),\n      this.loadUrl('https://jsonplaceholder.typicode.com/users'),\n\t  this.loadUrl('https://jsonplaceholder.typicode.com/comments')\n    ]).then( ([posts, users, comments]) => {\n      this.setState({\n        buttonState: 2,\n        posts: posts,\n        users: users,\n\t    comments: comments\n      });\n    });\n\t\n    this.setState({buttonState: 1});\n  }\n  \n  handleChange(event) {\n\tthis.setState({query: event.target.value});\n  }\n  \n  getQueryed() {\n\t  return this.state.posts.filter((value) => {\n\t\t if(value.title.indexOf(this.state.query.trim()) > -1 || value.body.indexOf(this.state.query.trim()) > -1) {\n\t\t\t return true;\n\t\t }\n\t\t return false;\n\t  });\n  }\n  \n  render() {\n    switch(this.state.buttonState) {\n      case 0: {\n        return ( <button onClick={this.loadContent.bind(this)}> Load </button>);\n      }\n    \n      case 1: {\n        return ( <button disabled> Loading... </button>);\n      }\n    \n      case 2: {\n        return (\n\t\t\t<>\n\t\t\t\t<input type=\"text\" placeholder=\"search...\" onChange={this.handleChange.bind(this)} />\n\t\t\t\t<PostList posts={this.getQueryed()} users={this.state.users} comments={this.state.comments}/>\n\t\t\t</>\n\t\t)\n\t  }\n    }\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}